lambda_explicit:
    regex: "(?<inner>(?<balanced_parens>\\([^)(]*+(?:(?&balanced_parens)[^)(]*)*+\\)))\\s*(->|\u03bb)"
    formatter: '(lambda { group:inner -> [1:-1] }: { token:1 -> st })'

lambda_implicit:
    regex: '->|Î»'
    formatter: '(lambda _=None: {token:1->st})'

# Mixed unary None-coalescing operators.
unary_coalesce_none_dot:
    # Matches a?.attribute.
    regex: "\\?(?<inner>\\.[\\w_][\\w\\d_]*)"
    formatter: "({token:-1}{group:inner} if {token:-1} is not None else None)"

unary_coalesce_none_sqb:
    # Matches a?[i] when the brackets are balanced.
    regex: "\\?(?<inner>(?<balanced_sqb>\\[[^][]*+(?:(?&balanced_sqb)[^][]*)*+\\]))"
    formatter: "({token:-1}{group:inner} if {token:-1} is not None else None)"

unary_coalesce_none_par:
    # Matches fn?(x, y), fn?$(x, y)...
    regex: "\\?(?<inner>\\w*\\$?\\w*(?<balanced_parens>\\([^)(]*+(?:(?&balanced_parens)[^)(]*)*+\\)))"
    formatter: "({token:-1}{group:inner} if {token:-1} is not None else None)"

iterator_slicer:
    # Matches $[...].
    regex: '\\$(?P<slice>\\[[^\\[\\]]*\\])'
    formatter: 'lindworm.header.LindwormIteratorSlicer({token:-1}){group:slice}'

curry:
    # Matches $(...).
    # Hellish parenthesis matching
    regex: '\\$(?<inner>\\w*(?<balanced_parens>\\([^)(]*+(?:(?&balanced_parens)[^)(]*)*+\\)))'
    formatter: 'lindworm.header.curry({token:-1},*[{group:inner->[1:-1]}])'

ternary:
    # C-style ternary expressions.
    regex: "\\?(?<inner>[^:]+):"
    formatter: "({ token:1 } if not { token:-1 } else { group:inner })"
